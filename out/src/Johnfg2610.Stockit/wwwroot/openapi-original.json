{
  "openapi" : "3.0.0",
  "info" : {
    "contact" : {
      "email" : "johnfg2610@gmail.com",
      "name" : "john",
      "url" : "https://www.github.com/johnfg2610/stockit"
    },
    "description" : "Used to access inventory counts as well as brands and catalog items",
    "license" : {
      "name" : "ISC",
      "url" : "https://github.com/johnfg2610/stockit/blob/master/LICENSE"
    },
    "title" : "Inventory",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "http://localhost:3000"
  } ],
  "security" : [ {
    "jwt-auth" : [ ]
  } ],
  "tags" : [ {
    "description" : "Used to access or change brands",
    "name" : "brand"
  }, {
    "description" : "Used to access or change catalog items",
    "name" : "catalog"
  }, {
    "description" : "Used to access or change inventory",
    "name" : "inventory"
  } ],
  "paths" : {
    "/inventory/{catalogItemId}" : {
      "get" : {
        "description" : "Gets the amount of items avalible in inventory of the requested catalogItem",
        "operationId" : "get-inventory-catalogItemId",
        "parameters" : [ {
          "description" : "The catalog item to modify",
          "explode" : false,
          "in" : "path",
          "name" : "catalogItemId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "example-1" : {
                    "value" : 32
                  }
                },
                "schema" : {
                  "default" : 0,
                  "description" : "The amount of the selected product avalible",
                  "type" : "integer"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get the current amount of the item available",
        "tags" : [ "inventory" ]
      },
      "patch" : {
        "description" : "Updates the amount of a item",
        "operationId" : "patch-inventory-catalogItemId",
        "parameters" : [ {
          "description" : "The catalog item to modify",
          "explode" : false,
          "in" : "path",
          "name" : "catalogItemId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/inline_object",
          "content" : {
            "application/json" : {
              "examples" : {
                "example-1" : {
                  "value" : {
                    "amountIncrease" : 35
                  }
                }
              },
              "schema" : {
                "properties" : {
                  "amountChange" : {
                    "type" : "integer"
                  }
                },
                "type" : "object"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_201"
                }
              }
            },
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Update the amount of a item",
        "tags" : [ "inventory" ]
      }
    },
    "/brand" : {
      "post" : {
        "description" : "Used to create a new brand",
        "operationId" : "post-brand",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "examples" : {
                "example-1" : {
                  "value" : {
                    "name" : "string",
                    "description" : "string",
                    "iconUrl" : "string"
                  }
                }
              },
              "schema" : {
                "$ref" : "#/components/schemas/BrandForm"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Create a new Brand",
        "tags" : [ "brand" ]
      }
    },
    "/brand/{brandId}" : {
      "delete" : {
        "description" : "Delete a brand by ID",
        "operationId" : "delete-brand-brandId",
        "parameters" : [ {
          "description" : "the id of the brand to access",
          "explode" : false,
          "in" : "path",
          "name" : "brandId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Delete a brand by ID",
        "tags" : [ "brand" ]
      },
      "get" : {
        "description" : "Get a brand by ID",
        "operationId" : "get-brand-brandId",
        "parameters" : [ {
          "description" : "the id of the brand to access",
          "explode" : false,
          "in" : "path",
          "name" : "brandId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "example-1" : {
                    "value" : {
                      "id" : "string",
                      "name" : "string",
                      "description" : "string",
                      "iconUrl" : "string"
                    }
                  }
                },
                "schema" : {
                  "$ref" : "#/components/schemas/Brand"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get brand by ID",
        "tags" : [ "brand" ]
      },
      "put" : {
        "description" : "Replaces a brand by ID",
        "operationId" : "put-brand-brandId",
        "parameters" : [ {
          "description" : "the id of the brand to access",
          "explode" : false,
          "in" : "path",
          "name" : "brandId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BrandForm"
              }
            }
          },
          "description" : "The brand object to replace this with"
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Replace a brand by ID",
        "tags" : [ "brand" ]
      }
    },
    "/catalog" : {
      "post" : {
        "description" : "Create a new catalog item",
        "operationId" : "post-catalog",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CatalogItemForm"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Create a new catalog",
        "tags" : [ "catalog" ]
      }
    },
    "/catalog/{id}" : {
      "delete" : {
        "description" : "Delete catalog by ID",
        "operationId" : "delete-catalog-id",
        "parameters" : [ {
          "description" : "The identifier to refrence the catalog item",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Delete catalog by ID",
        "tags" : [ "catalog" ]
      },
      "get" : {
        "description" : "Gets a catalog item by ID",
        "operationId" : "get-catalog-id",
        "parameters" : [ {
          "description" : "The identifier to refrence the catalog item",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CatalogItem"
                }
              }
            },
            "description" : "OK"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Get catalog by ID",
        "tags" : [ "catalog" ]
      },
      "put" : {
        "description" : "Replaces the catalog item",
        "operationId" : "put-catalog-id",
        "parameters" : [ {
          "description" : "The identifier to refrence the catalog item",
          "explode" : false,
          "in" : "path",
          "name" : "id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CatalogItemForm"
              }
            },
            "application/xml" : {
              "schema" : {
                "properties" : { },
                "type" : "object"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Bad Request"
          },
          "401" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Unauthorized"
          },
          "403" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Forbidden"
          },
          "404" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Not Found"
          },
          "500" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "Internal Server Error"
          }
        },
        "summary" : "Replace catalog by ID",
        "tags" : [ "catalog" ]
      }
    }
  },
  "components" : {
    "requestBodies" : {
      "inline_object" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/inline_object"
            }
          }
        }
      }
    },
    "schemas" : {
      "CatalogItem" : {
        "description" : "A item contained within the catalog",
        "example" : {
          "imagesUrls" : [ "https://openapi-generator.tech", "https://openapi-generator.tech" ],
          "sellerId" : "sellerId",
          "_links" : {
            "seller" : "https://openapi-generator.tech",
            "brand" : "https://openapi-generator.tech"
          },
          "brandId" : "brandId",
          "name" : "name",
          "description" : "description",
          "id" : "id",
          "iconUrl" : "https://openapi-generator.tech"
        },
        "properties" : {
          "id" : {
            "description" : "A random identifier used to identify this object",
            "type" : "string"
          },
          "name" : {
            "description" : "the name of this item",
            "type" : "string"
          },
          "description" : {
            "description" : "the description of this item",
            "type" : "string"
          },
          "iconUrl" : {
            "description" : "A optional url pointing to a jpg or png image",
            "format" : "uri",
            "type" : "string"
          },
          "imagesUrls" : {
            "description" : "A optional list of image urls to display",
            "items" : {
              "format" : "uri",
              "type" : "string"
            },
            "type" : "array"
          },
          "_links" : {
            "$ref" : "#/components/schemas/CatalogItem__links"
          },
          "sellerId" : {
            "description" : "A random string used to identify the seller",
            "type" : "string"
          },
          "brandId" : {
            "description" : "A random string used to identify the brand",
            "type" : "string"
          }
        },
        "required" : [ "_links", "brandId", "description", "name", "sellerId" ],
        "title" : "CatalogItem",
        "type" : "object",
        "x-tags" : [ "catalog" ]
      },
      "CatalogItemForm" : {
        "description" : "A item contained within the catalog",
        "example" : {
          "imagesUrls" : [ "https://openapi-generator.tech", "https://openapi-generator.tech" ],
          "sellerId" : "sellerId",
          "_links" : {
            "seller" : "https://openapi-generator.tech",
            "brand" : "https://openapi-generator.tech"
          },
          "brandId" : "brandId",
          "name" : "name",
          "description" : "description",
          "iconUrl" : "https://openapi-generator.tech"
        },
        "properties" : {
          "name" : {
            "description" : "the name of this item",
            "type" : "string"
          },
          "description" : {
            "description" : "the description of this item",
            "type" : "string"
          },
          "iconUrl" : {
            "description" : "A optional url pointing to a jpg or png image",
            "format" : "uri",
            "type" : "string"
          },
          "imagesUrls" : {
            "description" : "A optional list of image urls to display",
            "items" : {
              "format" : "uri",
              "type" : "string"
            },
            "type" : "array"
          },
          "_links" : {
            "$ref" : "#/components/schemas/CatalogItem__links"
          },
          "sellerId" : {
            "description" : "A random string used to identify the seller",
            "type" : "string"
          },
          "brandId" : {
            "description" : "A random string used to identify the brand",
            "type" : "string"
          }
        },
        "required" : [ "_links", "brandId", "description", "name", "sellerId" ],
        "title" : "CatalogItemForm",
        "type" : "object",
        "x-tags" : [ "catalog" ]
      },
      "Brand" : {
        "description" : "A brand is used to display who produces a item, one brand can be used by many sellers",
        "example" : {
          "name" : "name",
          "description" : "description",
          "id" : "id",
          "iconUrl" : "iconUrl"
        },
        "properties" : {
          "id" : {
            "description" : "a random identifier to identify this brand",
            "type" : "string"
          },
          "name" : {
            "description" : "the name of this brand",
            "type" : "string"
          },
          "description" : {
            "description" : "the description to discribe this brand",
            "type" : "string"
          },
          "iconUrl" : {
            "description" : "a optional url pointing to a icon url",
            "type" : "string"
          }
        },
        "required" : [ "description", "name" ],
        "title" : "Brand",
        "type" : "object",
        "x-tags" : [ "brand" ]
      },
      "BrandForm" : {
        "description" : "A brand is used to display who produces a item, one brand can be used by many sellers",
        "example" : {
          "name" : "name",
          "description" : "description",
          "iconUrl" : "iconUrl"
        },
        "properties" : {
          "name" : {
            "description" : "the name of this brand",
            "type" : "string"
          },
          "description" : {
            "description" : "the description to discribe this brand",
            "type" : "string"
          },
          "iconUrl" : {
            "description" : "a optional url pointing to a icon url",
            "type" : "string"
          }
        },
        "required" : [ "description", "name" ],
        "title" : "BrandForm",
        "type" : "object",
        "x-tags" : [ "brand" ]
      },
      "Error" : {
        "description" : "Used to describe a error that happened during the execution of a service",
        "properties" : {
          "code" : {
            "type" : "number"
          },
          "message" : {
            "type" : "string"
          },
          "requestId" : {
            "type" : "string"
          }
        },
        "title" : "Error",
        "type" : "object"
      },
      "inline_object" : {
        "properties" : {
          "amountChange" : {
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "inline_response_201" : {
        "example" : {
          "newAmount" : 0
        },
        "properties" : {
          "newAmount" : {
            "type" : "integer"
          }
        }
      },
      "CatalogItem__links" : {
        "description" : "A object containing links to other objects refrenced in this item",
        "example" : {
          "seller" : "https://openapi-generator.tech",
          "brand" : "https://openapi-generator.tech"
        },
        "properties" : {
          "brand" : {
            "description" : "a url to the brand who makes this product",
            "format" : "uri",
            "type" : "string"
          },
          "seller" : {
            "description" : "a url to the seller who sales this item",
            "format" : "uri",
            "type" : "string"
          }
        },
        "required" : [ "brand", "seller" ]
      }
    },
    "securitySchemes" : {
      "jwt-auth" : {
        "bearerFormat" : "JWT",
        "scheme" : "bearer",
        "type" : "http"
      }
    }
  }
}
