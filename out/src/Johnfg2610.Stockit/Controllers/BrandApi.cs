/*
 * Inventory
 *
 * Used to access inventory counts as well as brands and catalog items
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: johnfg2610@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Microsoft.AspNetCore.Authorization;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Johnfg2610.Stockit.Attributes;
using Johnfg2610.Stockit.Models;

namespace Johnfg2610.Stockit.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BrandApiController : ControllerBase
    { 
        /// <summary>
        /// Delete a brand by ID
        /// </summary>
        /// <remarks>Delete a brand by ID</remarks>
        /// <param name="brandId">the id of the brand to access</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpDelete]
        [Route("/brand/{brandId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("DeleteBrandBrandId")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual async Task<IActionResult> DeleteBrandBrandId([FromRoute][Required]string brandId)
        { 

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get brand by ID
        /// </summary>
        /// <remarks>Get a brand by ID</remarks>
        /// <param name="brandId">the id of the brand to access</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/brand/{brandId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("GetBrandBrandId")]
        [SwaggerResponse(statusCode: 200, type: typeof(Brand), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual async Task<IActionResult> GetBrandBrandId([FromRoute][Required]string brandId)
        { 

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Brand));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));
            string exampleJson = null;
            exampleJson = "{\r\n  \"name\" : \"name\",\r\n  \"description\" : \"description\",\r\n  \"id\" : \"id\",\r\n  \"iconUrl\" : \"iconUrl\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Brand>(exampleJson)
            : default(Brand);
            //TODO: Change the data returned
            return Task.FromResult<IActionResult>(new ObjectResult(example));
        }

        /// <summary>
        /// Create a new Brand
        /// </summary>
        /// <remarks>Used to create a new brand</remarks>
        /// <param name="brandForm"></param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/brand")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("PostBrand")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual async Task<IActionResult> PostBrand([FromBody]BrandForm brandForm)
        { 

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Replace a brand by ID
        /// </summary>
        /// <remarks>Replaces a brand by ID</remarks>
        /// <param name="brandId">the id of the brand to access</param>
        /// <param name="brandForm">The brand object to replace this with</param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPut]
        [Route("/brand/{brandId}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("PutBrandBrandId")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "Bad Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(Error), description: "Forbidden")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(Error), description: "Internal Server Error")]
        public virtual async Task<IActionResult> PutBrandBrandId([FromRoute][Required]string brandId, [FromBody]BrandForm brandForm)
        { 

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Error));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(Error));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Error));

            throw new NotImplementedException();
        }
    }
}
